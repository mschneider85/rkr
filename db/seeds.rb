ActsAsTaggableOn::Tagging.create!([
  {tag_id: 11, taggable_type: "Link", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 12, taggable_type: "Link", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 13, taggable_type: "Link", taggable_id: 7, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 16, taggable_type: "Link", taggable_id: 70, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 19, taggable_type: "Link", taggable_id: 93, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 21, taggable_type: "Link", taggable_id: 8, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 22, taggable_type: "Link", taggable_id: 51, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 23, taggable_type: "Link", taggable_id: 51, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 24, taggable_type: "Link", taggable_id: 51, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 25, taggable_type: "Link", taggable_id: 55, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 26, taggable_type: "Link", taggable_id: 55, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 27, taggable_type: "Link", taggable_id: 3178, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 28, taggable_type: "Link", taggable_id: 3178, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 29, taggable_type: "Link", taggable_id: 3178, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 30, taggable_type: "Snippet", taggable_id: 6, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 12, taggable_type: "Link", taggable_id: 0, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 13, taggable_type: "Link", taggable_id: 0, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 25, taggable_type: "Link", taggable_id: 0, tagger_type: nil, tagger_id: nil, context: "tags"},
  {tag_id: 10, taggable_type: "Link", taggable_id: 2, tagger_type: nil, tagger_id: nil, context: "tags"}
])
ActsAsTaggableOn::Tag.create!([
  {name: "ruby", taggings_count: 1},
  {name: "Faz", taggings_count: 0},
  {name: "FAZdghdfh", taggings_count: 0},
  {name: "YOLO", taggings_count: 1},
  {name: "FAZZ", taggings_count: 0},
  {name: "FAZZZ", taggings_count: 1}
])
Link.create!([
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "Railscast #182", url: "https://www.youtube.com/watch?v=ltoPZEzmtJA", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "Google", url: "https://www.google.de", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "sdf", url: "http://216.58.214.13", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "Aktuelle Nachrichten online - FAZ.NET", url: "http://www.faz.net", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "Aktuelle Nachrichten online - FAZ.NET", url: "http://www.faz.net", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "FAZ", url: "http://www.faz.net", votes_count: 0, votes_sum: 0, preview: nil},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "asd", url: "http://faz.net", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.faz.net/", "image"=>"http://www.faz.net/img/faznet_logo_facebook_share.jpg?fb=1", "title"=>"Aktuelle Nachrichten online - FAZ.NET", "favicon"=>"http://www.faz.net/favicon.ico", "description"=>"News, Nachrichten und aktuelle Meldungen aus allen Ressorts. Politik, Wirtschaft, Sport, Feuilleton und Finanzen im Überblick."}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "111", url: "http://faz.net", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.faz.net/", "title"=>"Aktuelle Nachrichten online - FAZ.NET", "favicon"=>"http://www.faz.net/favicon.ico", "description"=>"News, Nachrichten und aktuelle Meldungen aus allen Ressorts. Politik, Wirtschaft, Sport, Feuilleton und Finanzen im Überblick.", "images"=>["http://www.faz.net/img/faznet_logo_facebook_share.jpg?fb=1"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "asd", url: "http://faz.net", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.faz.net/", "title"=>"Aktuelle Nachrichten online - FAZ.NET", "favicon"=>"http://www.faz.net/favicon.ico", "description"=>"News, Nachrichten und aktuelle Meldungen aus allen Ressorts. Politik, Wirtschaft, Sport, Feuilleton und Finanzen im Überblick.", "images"=>["http://www.faz.net/img/faznet_logo_facebook_share.jpg?fb=1"]}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "FAZ", url: "http://faz.net", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.faz.net/", "title"=>"Aktuelle Nachrichten online - FAZ.NET", "favicon"=>"http://www.faz.net/favicon.ico", "description"=>"News, Nachrichten und aktuelle Meldungen aus allen Ressorts. Politik, Wirtschaft, Sport, Feuilleton und Finanzen im Überblick.", "images"=>["http://www.faz.net/img/faznet_logo_facebook_share.jpg?fb=1"]}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "asd", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen"}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "asd", url: "http://www.google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen"}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "asd", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen"}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "aaa", url: "https://www.youtube.com/watch?v=0XFudmaObLI", votes_count: 1, votes_sum: 1, preview: {"url"=>"https://www.youtube.com/watch?v=0XFudmaObLI", "title"=>"Aaron Smith - Dancin (KRONO Remix)", "favicon"=>"https://s.ytimg.com/yts/img/favicon-vflz7uhzw.ico", "description"=>"BUY : http://www.beatport.com/release/dancin-krono-remix/1299637 TheSoundYouNeed - Music at its finest ll Website : http://www.thesoundyouneed.net ll Faceboo...", "images"=>["https://i.ytimg.com/vi/0XFudmaObLI/maxresdefault.jpg"], "videos"=>["https://www.youtube.com/embed/0XFudmaObLI", "http://www.youtube.com/v/0XFudmaObLI?version=3&autohide=1"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "Google", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen", "images"=>["http://www.google.de/images/branding/product/ico/googleg_lodp.ico"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "Code Mirror View", url: "http://jsfiddle.net/mofle/tZVsS/", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://jsfiddle.net/mofle/tZVsS/", "title"=>"Codemirror 2 - use as syntax highlighter - JSFiddle", "favicon"=>"http://jsfiddle.net/favicon.png", "description"=>"Test your JavaScript, CSS, HTML or CoffeeScript online with JSFiddle code editor.", "images"=>["//www.gravatar.com/avatar/49e9608c2b26d6ec555cdfff9862948f/?default=&s=80"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "aad", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen", "images"=>["http://www.google.de/images/branding/product/ico/googleg_lodp.ico"]}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "asd", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen", "images"=>["http://www.google.de/images/branding/product/ico/googleg_lodp.ico"]}},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "11", url: "https://vimeo.com/184840918", votes_count: 1, votes_sum: 1, preview: {"url"=>"https://vimeo.com/184840918", "title"=>"Jamie XX, Gosh", "favicon"=>"https://i.vimeocdn.com/favicon/main-touch_180", "description"=>"This is \"Jamie XX, Gosh\" by gavras on Vimeo, the home for high quality videos and the people who love them.", "images"=>["https://i.vimeocdn.com/video/595020366_1280x720.jpg"], "videos"=>["https://vimeo.com/184840918", "https://player.vimeo.com/video/184840918?autoplay=1"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "asd", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen", "images"=>["http://www.google.de/images/branding/product/ico/googleg_lodp.ico"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "faz", url: "http://faz.net", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.faz.net/", "title"=>"Aktuelle Nachrichten online - FAZ.NET", "favicon"=>"http://www.faz.net/favicon.ico", "description"=>"News, Nachrichten und aktuelle Meldungen aus allen Ressorts. Politik, Wirtschaft, Sport, Feuilleton und Finanzen im Überblick.", "images"=>["http://www.faz.net/img/faznet_logo_facebook_share.jpg?fb=1"]}},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "asdasdasdasd ololol das ist ein test", url: "http://google.de", votes_count: 0, votes_sum: 0, preview: {"url"=>"http://www.google.de/", "title"=>"Google", "favicon"=>"http://www.google.de/images/branding/product/ico/googleg_lodp.ico", "description"=>"© 2016 - Datenschutzerklrung - Nutzungsbedingungen", "images"=>["http://www.google.de/images/branding/product/ico/googleg_lodp.ico"]}}
])
Snippet.create!([
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IJYXSLPD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZRQVDDW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBUBCHRC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAVPLWSK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBXQWYOR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSNIFOFO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHJHBDEA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVSWPFRQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MRVTMZMR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMMJLSWO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQMKGRNT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVYTTZIO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSAGAQNC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCSHYZLF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDNRSMSI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFZOACBG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ALUCZUIU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MZHXCNPI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBCZDNYG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WTZEORXZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NHKWJCNI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHJXFKEK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BTHAPKKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLOYYQXX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BFAKZICO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVFFUNHX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJFTEMLQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWIZODIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LOHCQZQZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "111", body: "111", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBWMFPWH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QOAWPAVM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVMTFHLV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XQJDPYRT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JCLTIBYW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MJMEWCWY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFMLBBMD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWKZMFNL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHQRDBLW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IFNIBJUR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "sdfsdf", body: "sdfsdf", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQCRNFZA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LCOHGZKA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QQDWYZCT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FNSUZIOZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SVREZFQX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARYTSBWN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AENGSUSX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DMTZSSQY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFRQPPZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZQTKXCN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYDIDANN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDLOJVOP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZWVZMQF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RXEXCWKB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XCIUHOEA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARSIEWCH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HJUDODYU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HKUFIHTY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCQMXGLQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUMDDMAA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UROLYQPD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBKCUOJF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OKRPHPYT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVLXYIAL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQJHOYES", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDSUMWAV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSCRKMQL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQDUCCMH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGFRTDIO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYOVHWUL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CPWYFLJR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSBCYSTT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGAQHWWG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UUABELMP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKVWCLPN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRPWGAPL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYGPLUJU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHYGCWHH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FDXSPCRF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXLARIDJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKRBMMMS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVARDFOT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPXZXRBM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDMQPNCH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMOEBWQH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TOHYTCWP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PUSQEPEE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XPGVPIPD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGRFLNYN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBFXVSXQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OBGAECCA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPPSKHQA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FWOHVVVG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZDORWCC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NYMPIBEX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZLNXGXV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZKVPVRC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQSSFBCH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NQDBQQTN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ECJDDSUA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LVCSVEUL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHEYFQRI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VAJTEXGR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FLDCQNKN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPVJUYJR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXTQUGHN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDJDNTUC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNXXRBRV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQQRTOSE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GAHXDWZK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLXTKGCZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USTFGZNA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJQWXNAW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJPRXHHB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYHJYJCU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQZCGPTN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBGZJUBD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RWZKKXTJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDYYAXYK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOAHCOMG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JLBSGTDA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZXJAEXS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUWLCUXM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYRVTMVJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYKZLAYD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGZKUFCK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQGNSIVI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXTBAPXP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MTRHPZVZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FOEWUQTX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XMNAQJVM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AWRVULIN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVNWKOGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QVICWYVX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YTZOHYBU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAKGCRZW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JODXBDKF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHIBBLZR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNBWXGTK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GMLPUICK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JNWAIZPY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OTMQMJYX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MHVUUPRY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HYTRDNWJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ASXJINHU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWPGEHQA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOJQZXWH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHDFLQJE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QBDSUKQO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUJBOPKP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCKNJPXV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKRQSLQO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCTOOONZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AFNQOOCB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GPVZZMNV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EBDECNGK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TOFUFRJN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHEIWBYL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LVTIMIQB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSXWENUT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABKQIIXG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHQBOSVP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STKVEGFJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRPJNHHW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KIFBBSFO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JFQAXIAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ALRXACFW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ITOEGQRS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHARBYYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCHUULVW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWDYJNXH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLRXONGX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YHEBTALP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMTAWCWB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYNRSDJM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWTKRRLD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOASTGWP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJKAVYSL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RSLMBVHF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLNWESPX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYRDFGSI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDQAUURL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMNNRRCP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QLSISOAY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BBDZCTOD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBZBASIC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FATUEFDZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HFYIITPL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWWJRCXB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXDLMXYD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQYOGPMV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VCJHIOSY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUSMWZAA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWOQTEIH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLXATSXW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVRJGZAL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLLFXRBK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMTRUJAL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QEUMENFF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYXZIBMM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GMQAONDF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMIOFGRD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IPJLETET", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IPXAPJDC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHPDAGXV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWFVSMOA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAFTIWDJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZJIHXKB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHLLUWOS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXBQIPXQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLFRMNYH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SPQFLUSL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYUEOUFQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQVJPNDQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPHSZASQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ULBABQTD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "COTHWAHH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YPUNAWRO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RWNXYONG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QABUZFCK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRDXJXYP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SJCHWPZY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUKWOCMF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUOWPKKR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JTGSSIIL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWIXCZNU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGRKHWRF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOYDRZJI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJEZSOGS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOMOOXGW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTDNXBED", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GLRFGSAO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HXWIBIFL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MMMPJIWD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRNJQMZL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBBGBJUU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQCCLUFU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTKNDAZU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CWCJZDTY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XSYMIGNP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZAALJJF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JAVNXBWC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWUZFHYS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFRUTDQO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGXBYJWF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGZYPIOW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEGEDMEJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OTNYMQIW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFWTWOAS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEFSKQUJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSCWUDWQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKCVUWTO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DMFWDVVK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZPARERK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VURCYNNK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDWIMDXR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYSPOFED", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XERYIOCO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KUXCVDBZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBYIDGIL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZBEZRESY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YENVUNSB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GQJTZZWA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNITAMPO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKIAESHX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YXHZARMN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SGHJBOTK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XXXXXMHL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GGZMPECE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILDCAWHU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNGTDDTW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYGNQZVL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUSIXIOK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MCFYPPOC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MOCBEIAH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FXAAARNT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UMKCAQZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZZBGIVF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUKBFCVU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POEQYXWR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNCBYBZV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVXOMATP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UADRPEKB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ITLTHVJC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKORZNYQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRYKINOQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOKCDFOU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OPZXBCGY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLOTKYAD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AESWTHUD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBYDQICX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHZOZQAB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCFEOPSZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CAXJHWBB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KIHOCBMD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CALAOCZB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYPNJTKP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMWLPZTX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWNRVLDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SVWADFTG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJNJHZZP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJISEMMW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ROONPGRX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKMGYNBI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCXHGZUQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XSGAKAOE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOCVPOMI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVTUJTBN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOXDMMSW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPXRAJMD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RMVRZSKB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TVQYFMFD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JMXCXPJP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BGWYWXCN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GFMWVMSU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOCKNDUK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CMDGPVIU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWFBAEJL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDUQODUV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KYKRXLJQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MOBZYLQV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GGRWQNOS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFLHLHNP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPFAARAN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYOTMWXO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KUWYASYS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XFABBRZP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KKUUVNEZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUDQFXJH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ERQEYCIY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EESQBVQG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZAZBTHI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRVXZEVY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KRZCESGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVDPLHTU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLCGQORL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFHLBUPU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVVRJLGU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGUXTRCC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FFFQWTDG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWNPUZHQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVIXOYLE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OBGGWXWU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FLYDVAQN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XSGOAXSA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEWGBWRY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZJZXYGJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWTHWHNV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVKVZUPL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NQYMTZQT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVBUJCVQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JRCGIWKR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQXTRAAU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUNJJSJA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHUXZERH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLHATUXX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCCXPZNV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NAHOEWKA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGWBAZHD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHHZCXZL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFGRQZOB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDPZAUFG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PDXNXSBI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VREZQTGL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDDCGICK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UUNHMKLT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKXPVTML", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJESOMMU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQMPFFQP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWEYQNXY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOOXOQDE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEUKLQNP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFZFKDVI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTZTJQWP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HTBTJFOI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFLJIRTZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HIQJTJUF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RXBTRPFO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGOJQNZN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDZBOLYO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BBMMOSWO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZLPLOAL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AAZLILQN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCPLJXPQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FYOAUPEI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OHBFERBT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYVESJOA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTYHMBTI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBIFCCYC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOKNKGGT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXLWCJXW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NKGRACAV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUFUXDQX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SOKKGPNV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMSZBLME", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBWVXYTU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LBNJLPZZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFSHEDMF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QRHCDTKG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGLIVCUZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJSIWVZI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ECICPHYJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OIXDVWGY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHZQBGPE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMHJSCNC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQCXZHUP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHJAOIPP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BNAXXPOG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CTWUODEH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXYBKAEC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNYXMUHK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XMEDHOWF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PNWIFLSQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUQPHLGX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLSREAXV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FDQYVDWQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HSZFLOPO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GPZUNYST", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRLUTQVN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUXRFJIA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZFDHSPX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVHOLBCI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGYTWWII", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYYHVYOH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POZXXNKG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVNLEOQW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUXLIQOG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZNAJJOQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JEXKMCNX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GANKIDEF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDXQJHCL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWUEBILA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMCFKSHZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPFWIZZM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDVELKSR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DAHOFFRJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPWMXCAF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYBWEMUZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CDCRLTZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQHDQGHO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWEZLBDI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YTSVKHOG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRFDFRWF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGUZLCKK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQSZZHYJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXPFQDES", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXRCJQLA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQRXIJHD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HTWEPSYJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LINKVLOR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQYBCMZH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYHFNVIZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRMYFJGF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWLLIKYX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTHCWTRG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NMOTEGCS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSUDCBDS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWZTJFIB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDZBJYQU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHNIUVNR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMXQQTPW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFRRRPVH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TEYATIOW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLURWRKU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OKHQFMUO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WMSOWCYT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BNJGUTAC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KAVTNHMW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOVZNPZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZKEVSYGY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HHOYTKJO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TEPOIJFY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VTQCWFGP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQAGMQVC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVOZVRDA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OXVGHDDL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FYJXGRTS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIENQYFJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIHGBSCX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MAEHIFXJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKFYYCQV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXITYASB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOFJMHJG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTJAXYIO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHQXFFOM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANPZXEWP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MQHUPGYY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JAYLSPYP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPGURPKQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UJXLADRI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THSFTWEG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HMXIFZRS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GIQMOLXS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJPGBTKB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSOGBGRM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCIYYZIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SFUBPEPU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHYLDCJW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WODSXJXB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFDHWPQJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOWTMXHJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RIQHXNTG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CECTWDQO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSSPPVZH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCKRECYI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YXFBZOIJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZOSRWVO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUVBKPQA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IJZYJJKU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCBWTKQZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOMCJJDO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUOGOKYT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SNQROSIN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWFFDAVW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JWYHVSVX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBWPNQCT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTQRVJFY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSWLKGJO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LLFSBMDU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKKQPYFT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GFZNIUUK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRFKBJDY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CVUMTDYC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQTNKNLJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHTEFFNS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVBSWFDI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STSNUPQA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GLWRNPBD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXOMKYSX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNDOLKHA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEYLQCOK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVPCSKFA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAFCDGMF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQVRZAIJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRIGFBYF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JIGIXQXG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRLSPPPZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANQOMQCD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHSRTPYZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYKFKPYO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGLWKFBY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIQEFUAV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCLNFRIP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVJDRWYZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZKROBOB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVBARYPV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDGQHMFX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRKFWSWB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GQJYJUWG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFEABNYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VGYBJECU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CHYXFTJV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRZPDJGB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNPJIKHT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJCQZAYX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOGTRLNH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOHKDBQR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBZYIWAP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IZOTSVZR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPUWCJJL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ALTEJSDQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ORLOCCDF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOBUTQEK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLLTWUWW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FPWMDPNX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOLBGLLQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOACZCOM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BAFTJKXP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QOVRWCQI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OGCTFSNG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWAAZTFR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGJJBUTW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHWFCGTA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OZOUYYRG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXIEYGFT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPXVFMFC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKLCBRZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPPVPRCF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WYYIRKOR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAWLJTXT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHAVIEPK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTYEZKYJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMHPFIXF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMOOXLUI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXVQSVKC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSMVJBZO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWTWNBNF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QBYUBICP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOKHBBKP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILVVOQAY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USJAIKYS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPIKTIKW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YAWOBDCF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MNCFWCTC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HIQKNKOD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JLXWRNUQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUSQFLLJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TNKRPBAH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UANXMHZG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSZFUJEL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXVBFKOG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FLYIORHJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNQPEFIP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDPDTAZB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMIKTDAG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOQVEPUR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EAQMHQTG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRIGCIFS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HSQJLXIW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVTYAUSB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMZVCQID", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPQBXCGR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BJPSGDTL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QXNBPIJN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQCEDUCY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KINUMTSZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSIGICQM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOJVZLKC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNSJVOVO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RRBYVIHA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NYTCBNML", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKCJYLCN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BTNAAABZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOHGARFS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBVQBZGS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMVHGXYH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FVJQHABR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJHJNXQC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FFAGKOHU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPLINTOG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JIHZYKPR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVYLKYMA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CZPDMNAV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDBOEBIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GWXFKQMH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NPVLDIMT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGWHEXCW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EIQBCWTO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVTPKWDL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWWXQEFE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDMVJRHN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XONPGKCF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USFXZEIF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCMISLPU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYVDDVDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAGNHIAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHXFBHNG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVXTHCMK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KETAWMBD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LLGBDYBK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QIFIFHSL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXTOFBIM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OFDGYOBW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRWOWSKA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBAKEXDK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGGNUWCH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVQGSMQU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OFEKRIJB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTBGRODH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QIMXRUJA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPVDCFNQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KEMLVYBW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LZAHPVZP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFRNBVVS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JIFCHLKZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKKIGNGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXVBCNKU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNLYQFJL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VLZSDNVB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLZCLAEV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQUKPPCJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NYSSGVYS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHNRNCCU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PPEJULRA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUKNGZQR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZOYWPSU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXIVFIAG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETIARGRS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXKVIQCY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LYZAXQPX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNBMHPTC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVUBYRBU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JEUEICFD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYKEMMZA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REHMYRPC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBLYOYPS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHLJXFIT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBYAGCPY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNQOAVRW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRAHQQTE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ASZPPKIL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSMWDTRS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KUTCCBMF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLZTWZMM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVPDSXEV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STAZUUPN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBOZDTEG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKPWDAQP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWATKAKT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LOUPZKNF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUKOFIQQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OJSQVFOJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFSXLQCK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDYPNVNW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCHOPHPI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VODAJIGL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMUUAWJD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AELBTXUE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABIPMDVW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQFZIBSR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JCMWSSII", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SFFROPOZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKOXNSDA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YELQEOWN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXZTCTRR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THYFYPQL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHHAVJIO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLLFMRQF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AQWEFSRM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSQZZYCV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQMHEOID", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHFPHHNJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZDNHWSD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YXURHJGL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CULRKRHG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IINEKCAK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMRXWWPV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NYHHIKPJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BAMKRJLC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWXCKOFD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXSEPWTD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "test", body: "<div id=\"title\">\r\n<table>\r\n<tbody><tr>\r\n<td class=\"logo\">\r\n<a href=\"http://coderay.rubychan.de/\"><img alt=\"CodeRay logo\" id=\"logo\" src=\"/assets/coderay-20a497980b772c04341efd4e438505aa.png\"></a><a class=\"version\" href=\"http://rubygems.org/gems/coderay\">1.1.1</a></td>\r\n<td class=\"menu first\">\r\n<h4 class=\"tryit\">\r\n<a href=\"/rays\">Try it!</a>\r\n</h4>\r\n<h5>paste to highlight</h5>\r\n</td>\r\n<td class=\"menu third\">\r\n<h4 class=\"download\">\r\n<a href=\"/download\">Download</a>\r\n</h4>\r\n<h5>\r\n<a href=\"/download/source\">Source</a>\r\n|\r\n<a href=\"https://github.com/rubychan/coderay/issues\">Bugtracker</a>\r\n</h5>\r\n</td>\r\n<td class=\"menu forth\">\r\n<h4 class=\"documentation\">\r\n<a href=\"/doc/\">Documentation</a>\r\n</h4>\r\n<h5>in autumnal colors</h5>\r\n</td>\r\n<td class=\"menu second\">\r\n<h4>\r\n<a href=\"http://cYcnus.de/raindark/coderay\"><img alt=\"Why\" class=\"icon\" src=\"/assets/why-377e737e943eaa4c62b154fa683cf0f7.png\"></a>\r\n</h4>\r\n<h5>Old website</h5>\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n</div>", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "!!!", body: "var Admin = {\r\n \r\n  userAlertID: 0,\r\n \r\n  init: function() {\r\n    _mixin(this, AJAXUtil);\r\n \r\n    this.bindToDataActions();\r\n    // search for current user right away\r\n    $(\"#admin-form\").submit();\r\n  },\r\n\r\n  bindToDataActions: function() {\r\n    $('#admin-form')._on('submit', this.findUsers, this);\r\n    $('#clear-cache-btn')._on('click', this.clearCache, this);\r\n  }\r\n}", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FPGEHWTS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ISGRNHGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UCCXUXNM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SDZURCQQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMQJNZPV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVZAKJPI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKERZWPM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPMJIMUZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLEDBBQJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUZLQOQI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVQQAHVZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODHJMQSQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZIXWZNQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 1, votes_count: 1},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "test.yml", body: "ruby:\r\n  human: Ruby\r\n  full_name: Ruby\r\n  mode: ruby\r\n  extensions: [rb, rbw, rbx, rake, rspec]\r\nyaml:\r\n  human: Yaml\r\n  full_name: YAML Ain’t Markup Language\r\n  mode: yaml\r\n  extensions: [yml, yaml]", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KAMOCUOV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEAELUNX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKIXTUUN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQWANTGF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKSYAGZX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEYHUZSH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAGWBZWK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XWFBGOGJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XETXPYPH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPXQAIWE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "test.txt", body: "class Snippet < Post\r\n  enum language: [:ruby, :yaml, :css, :scss, :sass, :javascript, :coffeescript, :haml, :slim, :erb, :markdown, :shell, :plain]\r\n\r\n  validates :title, :body, presence: true\r\n\r\n  class LANGUAGES\r\n    class << self\r\n      def all\r\n        HashWithIndifferentAccess.new(YAML.load(File.read(File.expand_path('../languages.yml', __FILE__))))\r\n      end\r\n\r\n      def find(term)\r\n        all[term]\r\n      end\r\n\r\n      def where(**args)\r\n        collection = all\r\n        args.each do |arg|\r\n          query_key, query_value = arg\r\n          collection.select! { |_key, hash| hash[query_key] == query_value }\r\n        end\r\n        collection\r\n      end\r\n    end\r\n  end\r\nend\r\n", language: "shell", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ALKSJCOF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCQPYPON", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRIDZZKF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HIAKVDEH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKFDNYLP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMPIAXJQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWIMWITZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VIAFTBHC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOTXPCYI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUEDDMDB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYLPIPCX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JXWECWMD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BERNUDVT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "js.js", body: "var Admin = {\r\n \r\n  userAlertID: 0,\r\n \r\n  init: function() {\r\n    _mixin(this, AJAXUtil);\r\n \r\n    this.bindToDataActions();\r\n    // search for current user right away\r\n    $(\"#admin-form\").submit();\r\n  },\r\n\r\n  bindToDataActions: function() {\r\n    $('#admin-form')._on('submit', this.findUsers, this);\r\n    $('#clear-cache-btn')._on('click', this.clearCache, this);\r\n  }\r\n}", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZJYSEFO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFZIRQNW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZBIAUBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNMWLRTZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "test.rb", body: "class Snippet < Post\r\n  enum language: [:ruby, :yaml, :css, :scss, :sass, :javascript, :coffeescript, :haml, :slim, :erb, :markdown, :shell, :plain]\r\n\r\n  validates :title, :body, presence: true\r\n\r\n  class LANGUAGES\r\n    class << self\r\n      def all\r\n        HashWithIndifferentAccess.new(YAML.load(File.read(File.expand_path('../languages.yml', __FILE__))))\r\n      end\r\n\r\n      def find(term)\r\n        all[term]\r\n      end\r\n\r\n      def where(**args)\r\n        collection = all\r\n        args.each do |arg|\r\n          query_key, query_value = arg\r\n          collection.select! { |_key, hash| hash[query_key] == query_value }\r\n        end\r\n        collection\r\n      end\r\n    end\r\n  end\r\nend\r\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EAXWWOPB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VDHQTLOM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNDSAFTT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJIOMBGS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGHCFQCW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGWJEZUT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JOGKCLSM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GICQDDVR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWQFGOMF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEIYEGXD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YILMVRZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GZCSILIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDZDAFXC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BTYWSPCI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QVNNTPRF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRVZIVAV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OGEMQQQB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWDRNQUH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ICZMREKQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "Caching Tagsinput by a Data-Attribute", body: "var cache = {};\r\n$(\"#birds\").autocomplete({\r\n  source: function(request, response) {\r\n    var term          = request.term.toLowerCase(),\r\n        element       = this.element,\r\n        cache         = this.element.data('autocompleteCache') || {},\r\n        foundInCache  = false;\r\n\r\n    $.each(cache, function(key, data){\r\n      if (term.indexOf(key) === 0 && data.length > 0) {\r\n        response(data);\r\n        foundInCache = true;\r\n        return;\r\n      }\r\n    });\r\n\r\n      if (foundInCache) return;\r\n\r\n      $.ajax({\r\n          url: 'search.php',\r\n          dataType: \"json\",\r\n          data: request,\r\n          success: function(data) {\r\n              cache[term] = data;\r\n              element.data('autocompleteCache', cache);\r\n              response(data);\r\n          }\r\n      });\r\n  },\r\n  minLength: 2\r\n});", language: "javascript", votes_sum: 1, votes_count: 1},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIZCKNUW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "html.htm", body: "<div id=\"title\">\r\n<table>\r\n<tbody><tr>\r\n<td class=\"logo\">\r\n<a href=\"http://coderay.rubychan.de/\"><img alt=\"CodeRay logo\" id=\"logo\" src=\"/assets/coderay-20a497980b772c04341efd4e438505aa.png\"></a><a class=\"version\" href=\"http://rubygems.org/gems/coderay\">1.1.1</a></td>\r\n<td class=\"menu first\">\r\n<h4 class=\"tryit\">\r\n<a href=\"/rays\">Try it!</a>\r\n</h4>\r\n<h5>paste to highlight</h5>\r\n</td>\r\n<td class=\"menu third\">\r\n<h4 class=\"download\">\r\n<a href=\"/download\">Download</a>\r\n</h4>\r\n<h5>\r\n<a href=\"/download/source\">Source</a>\r\n|\r\n<a href=\"https://github.com/rubychan/coderay/issues\">Bugtracker</a>\r\n</h5>\r\n</td>\r\n<td class=\"menu forth\">\r\n<h4 class=\"documentation\">\r\n<a href=\"/doc/\">Documentation</a>\r\n</h4>\r\n<h5>in autumnal colors</h5>\r\n</td>\r\n<td class=\"menu second\">\r\n<h4>\r\n<a href=\"http://cYcnus.de/raindark/coderay\"><img alt=\"Why\" class=\"icon\" src=\"/assets/why-377e737e943eaa4c62b154fa683cf0f7.png\"></a>\r\n</h4>\r\n<h5>Old website</h5>\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n</div>", language: "html", votes_sum: 1, votes_count: 1},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGSSLXXI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESHQILEN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLEYZOGG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFJVRLRI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URDGJCCU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JZJBUCGB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TNXFIRRW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLHXYDNB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHBMJYDJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWZVHALT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VAFGSBYT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBOKRHFE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZGVGFSYU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJJQHXJG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GWBVAWUD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWWVMZHP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SHZQPNMU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKJALWKS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQFPNUDC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYNXUHNU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OGBUEQHA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MTSOVWRR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FAWHQGCA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZESXCTN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EIKGULCX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CEDPPIDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHCHDAID", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBCITTEW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQMXRENE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXOOGFVX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXRRPUNF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUHHEYCL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUMWTNWN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TLCUXSUF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OCMANZOU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVCLARWQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWXXOLHW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZFHEIXCW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OGSVNTRJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MNSXCFNC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDYQNFQZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYBBPRID", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCNXLDBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CWGSUORL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TZBMMLTW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODNNIFKP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPXSRHTY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKQZVLML", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EPQJPGVH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVAQEHEO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KLTLBPBQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKSSJSJJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AQWAVCUD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZKXCAXHH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJNBLXPG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UEFIFGTO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JYXGJAJV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ERNVZWDR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RPKUIOHL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXBHFTDV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAZHQENN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELIESTTW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVGMXDDY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZSAWHJY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPOJNJJO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLWREKJV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GWTALIFU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BKKGLUXW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKXITPVX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPAZVPHX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MHMALZRO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUPPSLAD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKPCAXYC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTMCDDAE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPVCLEBP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MTFAUQNP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMGKHLHZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBWXTDII", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XAUJKLCZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSQQKTEC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLIHPZNN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZNZFZRI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTXWCCWY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUJTEZVC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BJRKNUMY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPXVAMCO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETEDWHHI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBDXBSVO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNMFFUMA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOWBNYBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CZMTNALO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVSEYYHD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HTRELYOE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTIPFICQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GGDEORGU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAUESVWL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSLZLAXK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEGMHJBI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJIQRQUY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PAVEOCAX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FKUFNASS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWQFVVTW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTHHUJPX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWIUJAUS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUYJLQST", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZKNMSXQL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZZKGUQE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XBKXBEDM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJMDEZXW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTAKPXZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FSQNPNJR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUQLMJVY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GIXTBIFQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MIAKMGJN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RSWTYJRF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MCKYURCU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYWDZOJQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APXZZOAH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBHBLGIC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHGRBKSW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GSXTOFBO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESBZQJMS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNZUFNJB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZGXGQGI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EIEAXEHT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LVKKKIVD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBZZSRQS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JXDZDBJS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "COYFUEAT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJOTHXPB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URXHBVLQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAEBCOHU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHHBEBGU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMQVGZWE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XQVEURPM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AQPNYCFG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGWUIPOY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZSXBVBM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZABQULZZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FROMVBAM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSDIMHHA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXELVXQQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNNICOPT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVPYYEKN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CWCUABBG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOOVSANY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHBJCSLH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YMKIQTUN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWJJDOCM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLVYBTZO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RMDSXTRD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGHWDSKA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVCXNHKC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGDYWZTT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LBZABVFK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQQVXRZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWAPZZLH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESYGABVJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HEJVCKTU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXRTJDYG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFBUJNZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDVLSCFU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXYSSZKE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VUAZZTTQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JCDXXFUI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HACHOJSZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYTFQXAX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUQSCCKW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJGLNLBC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FSOMEGSF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDOEKSGB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NINAWQYD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKAABKPC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLKXEMQW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UDVTZEHL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVKQKSFI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LIAUQDGA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKBEWGLM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DIQINFAQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IDTIQGMQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TAEJFITR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJWOKKUT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIXQRUAS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SGVHILNN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSXVCGSH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GPSIHVJF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRJSEHTT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXZHTNWF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GJYPUJVL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABRSGONU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILRXYGKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XMXQAIUP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DROHAACN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VLDTKKLO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJHKKSCG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FAOSMORD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZHMCRNB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YPQPDNFI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNORKKBQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFULJCBE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXQPKOGD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDYREKSZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RPQUEZLH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKOMPQNQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QNHDCXFF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TAXUBMZO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AQWGZNWD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OJJIZQOP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKBZAVCA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JWUGZRXW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWOUVIUG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VGDLYMHZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUYJDUEG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFGEKNEQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXCRBDBW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJZGPZYA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FWFQNCGB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVGTKJEB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DWGMSLRK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EAMNWMDO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KEXGWBXI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OPGWXKAN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBGZTBOK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HMEKRCJY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBBGULHE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NMZTKYVM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DGRIRNNB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GJLNJTPH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVVTTFWD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETGTVHHK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BODNLZUE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ECLRNLHF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FNHSWZFY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNNPVJUC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIJZLUUE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FTXJXOVU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XXCSETYX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AFRTDIYQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKHYYDYW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AFALMGAT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RPFYRDQP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHVLAGZF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHIOFVDO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGCYXALU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANIDJMKB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STNUVVUO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XSQPWTEO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LORXFTBL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CYCSFNRM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUBIPEBG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOSYGDOK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SOIHINPM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFIBEMVQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQDHOBKR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZNWXDTX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFSBIBIF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZRUKRTSO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHQSHGIV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JZLISYJB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAJXGMVP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TKVVVVVY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDBXZNZL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RMDNSWEH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMLYDHRM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWJZEZNF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIVHDUPY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVGABPPX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LXSERORR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SGUYIPWA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUSXOHHA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYXTBPJR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BNMFTFHY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLBSMSLM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YTIEWTXD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZBQYALX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBRZJIGZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZSQDHEO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZLMPLCW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTHOFEVI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCWVGUYM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVZKIROD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUBJRVCO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWRJKUEF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJGUWUKV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDLMSKKB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ERGYAXGK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEAJGWSI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RUHPOYGQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDWSOYBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSEOASOU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LACITBSW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMBHCGKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HETMTETX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IZERGYFV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XTXXPYIO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KKZCMWAI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ATJSNVCA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AWOXXFYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKOBTKPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXKJFLNE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBLTAKDL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYXEFXIR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZNEWBYK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PAGNSANZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIZTJLGN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZYSUOQVZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEDTFDRQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWBBPKOC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QRAXURNY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GCJUFASQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VDUFBCZC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVIPXTXM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPXYZWKN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGWENKVM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEYVVAGN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBTTSSWT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIZKDHOO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ORNLCVWB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PECLURRW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UTVKZQSX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CWYDVDXG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLONXHFU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVHTPBSP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXGBRUNW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXVTWYUX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MEKDRWCG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUHFZPGR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXHGIGCL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LDUCADEG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LZHJXQFD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AEWLTTKA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KQASURRO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELBDPLRA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQJDPUZB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RXPGHLNQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MIEBYFAC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFEWLMWX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LEHJUSTU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TOJTXHQH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CIZTJKGA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMTYOUNS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVFSMVUV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STROXMST", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JEEEKYAK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TTUBMOVC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHCCIDRF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDVBUPXH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHDAGQGK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUBWYGEU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YPOHUCEZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNFFEEJS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCCNVQCP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IIUZUNXB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MZDLCZNI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLOZOAIP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSRUAHWE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RHOHIWLD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LCQRYLMQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDLYBOTM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOOPQQZQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRFCQISP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRXGKZZB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZFNTFND", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWIXGNSK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POGWTJNT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMYOOUJB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUZBLYRS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBCRKAVX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FUNVESAL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MREHAPYW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKYSIEVN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMWNQDRU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WINKUHTW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZWSFKHD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZGWIHMO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGLPAGCU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TUMMAOFT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SAKIJGJK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UEMVDQYH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZJXBHEB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NINBKBHQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXWVNGRC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWTKSYHM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKNVQWCZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IEXWOJPB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DGKKDUQM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNROYEJO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARVYNXQQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MLOSBYIZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYQZSNZO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZEFULHMS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWYGRIMF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHMFVMZK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVLEXOLL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JGPYIZRY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QUOOINQH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXBWVDWB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPFXWOFY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYHOSSMD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHTZBTCS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWINXUNZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPTKUQXZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNLXODRN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMINPHZW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVKKYWKX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYLZMIDZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AZOLYGBE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRIKVMLW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPRMHKUA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJEMBCMF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STXMWGAJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UELKUWHW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQJDKSDL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OOEFVEKI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZFWZULR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBIAKQFZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMJDCXUD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HKPOAITT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGJOLIKS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPMDUZBD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFHPHGBW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BFYZYEIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRCHCCOW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QIBHCJGK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHTTTUII", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKHYFXEJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQQCUHCY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBQMOKAW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GARKDARE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZXFWIQP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXIYOKQY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FCVNFVTY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONUDPPTN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMVTPNQJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NZNIGZNJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFIVPUMT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAALNNCE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LOTQNTGZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKAMYUNG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBFPTZKR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDWHNUHM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZYMNWUJQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQBYMDAU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HUYOALLR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJXYFOQO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BTJGLYKH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXNPJSHB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XAHAZDZG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWXAPOXQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTMSZAIY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPXYNMUX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZGKFQRE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ICUHZBZY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FOOLAJAF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KQBZEIIE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AAAGAFIB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUOUBTLI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWRDWICX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QLLGQUYO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VISETDDL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IBHNVMIC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HTRFKAWP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUOBMUOQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUUHIOTH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDFNLLKJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSOWNLNJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRYMXXBI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NGFVHYAU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REFVGBQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYXMUQBV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMQWWIOO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KBHDBKUA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHHFEYBR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJLAHAUZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SISZZNIA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJZQNXIY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFVNLNYG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VUBEQLXP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OOWZNIYS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHTTFWVZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMIQKFTV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHVEPVWD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IEPUUIJT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UBDNYYWL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFSWMWTX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABUPCLXY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHSXGRRU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCCMAQWL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGYPRBOS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNESLWVG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYAQGQAO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LDBMTYIQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QVWMRCRX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCRCMFGF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLGZRHOW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IBIFCRYD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESXKCQUP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDYLNOCX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCEZHXDL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONMYKXJS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBWPBGXL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZJDZCNP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDIBJUHY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIHXBHDS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CPRFCSQN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJKWMQVW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVBJEXLC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXFBTNTG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMNCLGUD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZXMWNDGI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QRQLQRUK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SNMWANCM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MQTRGZUE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGRCYELG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVCGZVBR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRVYMFXL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWUMZIGY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOYFILYA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOKGUIHO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUQIVYCP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KRHMRUSR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFAQTSBB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZARUGEP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNWHJWES", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKUSGLFU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSOGXWKZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMWCKOXY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BONLHNPC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTAIEQJJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SPUGWXQG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SWFOMGJC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PUUGBKGG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDVTQSTA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHMVKHPZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZEHUANH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JWJYSYON", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMRZQFYE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZOYZSBK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDAAGSHB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQDYHYHF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGXIJXHD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMABTFAL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUHYVPRT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZEFZMWJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NEMTVHXJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ICNARBQZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHFQFHMP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQSRBNZB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKPTQZWO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBBEWTLH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKXRHXNU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHVUWQCL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIQPMEPN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKFDHOJU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DRPEACPS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYULSIPW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDADTEIJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUIWDRMV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSQSBDKU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCQMKHMN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLSBKWQM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EXDCNAVB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APNOSCYR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBYMAIGP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLGNVECM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MNDBBZZQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLRKEVVJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKFBJEAL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQCXRQYV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VGESQTAL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNTLFWZZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GFINVMOS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZGISIXN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TAXDYGXQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJJAWCXI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFDWBVIO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFPOVEYX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCGITQCZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IAJVWEHE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DWVHKPZG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFZFZBKE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAJDCCPN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZRMQBAQR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCUCQCTW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZPGBBNU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGANIBBE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHKDUZRD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MAUJUFFQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNEDMGQR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCDLEKQV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNTHKAGZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYYYXSUY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JECRRJOF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZKFPMWX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQOXWFZZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZDAYYEV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IPHQELYN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPZPXVVT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZLINVQY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HUUSQDQJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOFXEPWG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EJTCOWWF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BNSPNNDS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOHHMVYC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOKUCVVQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XPIRKZES", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABNMNKXW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PINHPJMO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMYCBKZK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UUKYUCSV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAYKTSBA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHAVJJFC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWRQFIBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MRNXSXVO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USWYUWHY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RIMSAVIO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GLLBTLRB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPIXVPMV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYSPKQTL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EONUFVTV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFXUCYPE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQXHCNCI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFOMVHQW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CHTYELXG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VCUOWZLQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJEHWLII", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ISYGHHWV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUULSWKC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBLDCLPD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQHIDHVR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NAQXFZGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJOZVWSQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOSMODTF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFHUBHVF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSQRLGUD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWEDDJRK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IACPPWIN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYCPXORU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JRESPNRA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFKVPABH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMYGBAGD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAXDBOGK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESTBKMHC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKGVKJNO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IPRCACEU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQVAGLRA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KYNSDJWV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ENXWSKHO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABWWBSMU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJXUBJJS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMBAZFTE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQVSNFCU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPWEHCAA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWRDWXLQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZNXLHPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YPAVNWJB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SNVFPNNL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYUGRMOA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSMVOEYX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NGMLPBSJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVUWAOKJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNMPOXLS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NKSPIGQG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWHCMBEX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRYBZXRB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZDIJRLV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ASRFJOAM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KLSAKHAI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TUTNWMGD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWXBBFTQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NZGRGLQW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PAEGDGJC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UCKKMWAR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDFHDHOL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZZCAXOP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UCKLJEPK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVQKDPPE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMIQCVJM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FCXZIWFN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BGEWSHAO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WSHAXCVU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQSZQPDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPVTJXCC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SOYJIAQK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CHKZVYKD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCKBQSJU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POIVTXDU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXZDFLBG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYDPESJK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HAHGFQJT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DAKQFKRK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPAOVTHN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KERTMSKM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHHQCQUQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCFXCOBD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVEQHVGG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CIFEOPWX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POBJVVJO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCKGUAGL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZJKXSHVI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RHNODCKZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MZNPXYNN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLYLJWYD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJJPDFEW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RAQZALCB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AWWSYOFI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQNYUIZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRAIQUSY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMKSUDKK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QDLHYMBE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSXARLQZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REJBUQXR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNZNRUWL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEMJZYEZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKHRYKTO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JRDWCTHO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IILTGDTP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZXSDJTB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIPJKJOR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HVBHQNCM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSCBTWHO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CESHIHAB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYUEFOTQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZSQRODV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FPXGCWXX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWEYEDPT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BKAXOIJI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHKKJJUB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZGUNJZZG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVYHDHIM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFSIUVAF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQSIZJAP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQIMBQCC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVIAODJC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYDWJNTP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKIXQCLO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GMCDITKV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BALLHTLX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPNTKJTW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWVBDXHV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TLFUOCNO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NPMFZHMU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HMAHFQHV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHMISRUU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXGOTPWD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVLWHYUB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PDSBXXIM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHWLOKND", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOOCKKIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ATFDNLOW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OTZNTLSV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHMGKUSF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWVWQRQA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLNPBAFE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HFLHULRJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUAVPZBH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQZDLRXZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZJSVABE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CGPQDKGX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TOFVLXPU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVLJRKEG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRAXSQKC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUDZCKAX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBLIZRZU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMKEAEGJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSBFKWZS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LGFWTAPS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TVFFKXDA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OHUBLUJK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMWRYXQD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNWLPZJX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOLTWYPO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFXLHQVL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TTQPPHSD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MQIQSQVT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXSBGJNK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EPXTMQET", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBVSXEQP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMNIHCIN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWIPXCCT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RIIRSRPY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYBHVZJW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KAWEPHUV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPGTMNTX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXCLAVZX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRRVBDLY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPVKIJKV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBGVLCUM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IYJIYXZJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDCJIZBG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGYEJYPR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CPRSFUEB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBADCGLV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPHENHPW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOFKXKLF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGDMEMDZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPWXIPHB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDDSWVFN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GEIADNOZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTKEZDGB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WISWIKRA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FXBSPJGF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TSHDQVFG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNUHACHQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVSKZWTV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNZTBXLC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LVNWLNZF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JCVZVCOE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWPCQDXV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKZOYPKA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ORRYLNRE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOWLXAKQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXTVFPFN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVLTOCYO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUJIEMLK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLVZTLDM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJBMCSIS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URHNHHGL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLPJQISX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NGMIMFTO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONXTBXGN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FXHMCGNX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TIBQWVDH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KYLFEUJE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NEOLPEPR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THJLEPQL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOIVEDUO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEKWWXJS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IESFCFMF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USRZWKZE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJWOSUXB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMLBDRNN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPQKBSXL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNBMSAZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKVCAVWW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HPHWMDIM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLWFNUCX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QSOFGVAI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OADCYYZN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HPZWIADV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTWWNOIS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HULHPUTW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FFGULUIF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSZCXCMM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOAWLCKA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSZIBCIU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SONMWSQJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUQCMGSC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNDWGPMD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VAMCOBYN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGBYVNPQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SHRSXBCG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQMXCUNI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZGOBGDNR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXDRERMZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CYHGJNFL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPTHOBDO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IZVHSBVV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQZQDUPF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARMIUVQQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHEBOQUF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RAGOQTFD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJLIMIYL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVLMNLRQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOWNKTME", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVHDDWVL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XWJCNFVV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZFVBHRE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WGQKYAWP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKXTIWAZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJTGQHYG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CJSOADNH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWRZIMYE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YIAXSDJZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVTPEKPK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVQFULCR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHTYKNQW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JABOSQOL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHBMSPYW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YACMGKKP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUNMYDRK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHIBONJH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHJCGVQE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPGKHAIY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXVTSFON", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GIYMJMLX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVZFQMDN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LGUJTNVY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UBCXUXPW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBHLLWJC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLLQGPJL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYEGMGGD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMNBEZKS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWVLVYPO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKDUTUKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HUYMOARR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QOMSYZKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTHKHRUA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHYNLOBX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XFZWJBHE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URNLQGTG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZUAXULG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNFMFRSG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHXLBOAI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UJJDDTSJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIBKQPKH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SOLUOORP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IAMIBRXX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDYHGSQX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXMIBWJT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWQGVWWA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYYNWSDX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYYMNVAT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRDVIOFP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANRHQSZR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NZSACZJO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFPPYMHF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VETILDQW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQCCXCCU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APNXBEUK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXNIDMDF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMESQMNZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDCUOHUQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UCYCECCC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTPBCTKE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IAEJIRFB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PAAYSJKJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLANSEVP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRHNXDRK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NOEMZGLE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSASWQKW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJWFSGCB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZFQMIRQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GAAEONIY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IFNDTYID", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LBXNOMVB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RUZOMQRF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CVQWRAZU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YTQJLADD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUWQJJYE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHSCVVAO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SJSBRJEK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRDOPFXN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NKSHZPLA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLOTEFXG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WATGAFOS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OIVMOTLP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUOIFHYN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQADGWJA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFPFVVTI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHYTKJPS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CAIZILIY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKBNSTLS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GJJKHNYF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XUBGQQRA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQSOAZAV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFEBWGUR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOMZMOKY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URSUDLKU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJVYSVMY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFNWYIBS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZAKKUMDJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWQWTFUK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MAHRXHDO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAQZKNHU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQAZQQBY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWKXDPOW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYTNNGSX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZXCCMWRB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFFKDZCA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GWWVKXDD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMDHEPXT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FVLGYFQJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MEXEHYEO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYKZXIBB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMKHRHUZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJPRDHGG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRCHAASR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JECNERAI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQWVOWVP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CEXLWQAU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UBRIERVN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZLIVVPR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPVGEDIN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DMBCDHFK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXMURGUS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QNPKLZKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XNOLLCND", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZVFMKXP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTKBRVII", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVXSNEUP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VYLEIJXD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IIEXRYSI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CHFDISGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRYOXMMM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HPSEGSUJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQQMUTUW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVKTGFWT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JOCAXZVQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WDIEOQUC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBKTNRPK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WDIOVZMG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHUFUQUZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVGDRIUL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHDEYJKZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWWVGMDU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKIBEYFJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCDJODKV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVAECPZX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LNKLANAN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HMMYRFWA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKTRUFZU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXEVHEVR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBVSGQPI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPGIBMZY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TNMEJMVP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XXKDBXMI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWVUUIMR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XUFEJSIE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKWGCEDK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QALIKDNW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYWJJOVR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKHFLSDG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYYAEFAJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMYMJYIE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HJKNAJMA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXZEHFCQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTQPAZEM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ROPKKUYF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUPHMPJG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OCBTHFGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYYZHGLZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCISJVOX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSTWLPCW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQQIGTQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZEWTFRM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWBTIIKD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SPPSWGCB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QECTFLAM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLGJCEIH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LYDURSCZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWWVBHOD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WDGEQETD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCMFSRNX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NCYQAYJA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLKSHXDU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIAKSCCW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKSCXMXS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGJTLGRZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQBLYFUH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THZYEPTH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRVPUEHN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DRUANIAR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWFRRQQZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XEZEGSWB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANNYXCZQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODYCVDJP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TTLSQING", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTIDPTBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRAEPGGL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHZLQPXF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZHAVFRS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDUCAWOV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ICWPWESX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TIWRINYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHGIMKPY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XTCLPNFM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNSXMHHN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSXBCBAC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLZOHWUE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PNMRCUGB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHMBNUNG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWXDJZJG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXZDVIYZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBEJALUA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCLEUGYY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUYOCORT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KELHRCRN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSDWQPBM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSECTUJW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLXBHDXT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDEQIBXW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AAVAYOHI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNEGAEFF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAKYSPXZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DCUFJJJU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QVIDOSWM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOFRRHFY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMZJEUNT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFHPZXLT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOARZNYS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GBDFJNVV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IABRHXOL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYMADWTO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GFOOGTIB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZCGWCAAG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXOCEPXI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDDZASDX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GAXQSTHK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IZJCFZHK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZBZOXHJJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSVHLZCL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXWZWIYJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGQBXRCO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QNWZUZEM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKEESAXD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNVXWQJB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JMSRWOHO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RISRQJBC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EFEUMCYC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BULHYNFI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFPKQVIX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUORGXGO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSAGGWIL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHRKCDMG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJYBVSPO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBVJIUPL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHIBIZHM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQKRZXAZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IRTIMTIY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QLKRWEDP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZOKQBDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZSZCORF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDKSMWTV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZTGRJWD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYLQTKPU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPSHWZWZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFVKLDIG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXEBIRBN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZKVRIUJC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUOXBIIR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RAOJROMR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFVWMQSA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYFEPTQW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQKYEMIS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNWJMGJM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DGKWEZDB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYNVPTJM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKHISVSF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYEACNRJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUSPJWDG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VTXZCDLI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LAVMTNVB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUTXVRSP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJAWNHON", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNMKMZVD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KLLWBVYQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLFZWKHS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUMIQXOV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVQMMBCZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EGZYPPHD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHMNWSMU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNKCTRIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDSLGKEC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCULRAZI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACEQHYMK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUHXFLAX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BALRJUMK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKZEEORT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLTQICJN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQIENTEF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDIXCUDW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NENAYHAM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LYQOVHQN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNICNPYV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHCGNTRI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GMJTGWSQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TQGPAPMU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YIERERSS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EINRTQIE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLLZBRQG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMPHSXBF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SDHLVYGF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJJYOAVG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XXPRREIM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUQMPWTQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZYZQMLZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKIMOMSZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZZUULUK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFHIATUC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYHCFSQT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJNOEVZY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRTVYMUX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYBXLOCA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMTHOPJA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JJULIVPA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XNUWPUNE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRDERUAR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IPACHNCY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ROGZTGPR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSZFIKRC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JOWNZLPT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SCBUGGSX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VQRHNUAC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSIPORFR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPXLOAQF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WSYOGLCI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SNVICTLF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHFPLPBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JGIEIZAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JFEMNQCC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NEUMVMCC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SWLYEMYF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUKLXBLD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JBCYYOPK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTDNJQFM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYPOTYRK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VGCVZJWK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFAAQMVD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZJMWRLCB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKBWXBJJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FUNGWLJH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGGSLKVS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDDCZTBQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEQJCMVJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OCOKETGZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXHPOFIK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IDDHQWOR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XVEHTZIG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZICTYIPP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJARRNTC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDBHIQPV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZKJEXMC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QBDPZHOI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XTFIENUC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMKVQVGO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BBIVQSFX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZEMOHFHQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUGYVLKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYOFNBMS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IHWASPXO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FWPWASHF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BURKXOMU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SIWEHAXV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGPXHKXT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELDQSSXJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOEGLQOD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSDOLTMI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZDVKWVK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLLDFSQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSCKCVLH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCDVUTIG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMLPTYJZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMBZFZMI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YMGMHPKO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUKQSILV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IXGEINUY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAUJUPGH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIJBEOGA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XWHZKYZL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVIIXJOR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MIKRQZWD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KHWVFTLK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GPARGKSK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EORAPBXS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CCIJZIPD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYWRGWJJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIINYSAC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OJNPUKGW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPEZBJIO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RIMSNDCE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRBMEYRL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYFZTWFV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYIXWMKV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MRJJWHSW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGRFRQST", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIJSHQWP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNURPKUU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJDYHCWM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DMAWDQGR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKJAJGRW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRPBVKFB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NASTNZEM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGAAOAFL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PAWRNWGC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEFMTXFI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNVFFYOP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FSIOFSFW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JFHOXXUI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYCKNTSG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QILHOICT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDHQAIQZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVWFBPCV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ENXOLGNB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXAJSHHF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNDNKHDR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFEQPYKR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKWYBAAD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRZFOYHI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZUIKPDK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTTAMAIO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABTNBRWG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SWWFEMYB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZLWNKSZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHTNQWYI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GAKLIIQE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFYUAAIY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YSYWBGPO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDKJUPKJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHZIDWCT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZXCKWZJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQNNDTKR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUTRYMBX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOYTVHTX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFXZXZZS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZECSXNPX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OKUVSDRW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFGSMLVV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWTBMRDN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJQEJQYC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MCAQGGSP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WMSSAXAP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VELOUTPV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUPDHMAV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXUVNVXH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNSKSYBJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUBMQZDB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSBYZDAW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDIDBPMZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGYHASSJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPSFOMUC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVJOCIVM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GSBEESMR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OEPANFTD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WFFUPGPK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUVANZIO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ISNCKUGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXSYGBDX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHHVJSYY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NOWUUNZE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JNRKJDDT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMXPZIMW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJKCKXOV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XARYTYSZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGHRXQWC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TQOTMAZD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDNAGVPP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZDHULBN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSFLXOCX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIZKTLPX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZSEJKDF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUWDEPAP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNGMEATP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POVVWZOT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNZVPSOX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKZCCTPV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMDGJNPL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUYMVEQD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JGMQRSUB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCWLFALX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYAYRQRI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXRPSRHU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LSIBNVWF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUSZPTXY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQZZGLIG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVRAOGYZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYPEFRQZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXCHIGXN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBFDKPPN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FNGAXFTO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDFEHLML", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUGWMBAJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGHOJSNV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWOWLIBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCVVGCHA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDEZXVUP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HUKLUFBV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GLGJBCBC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UTDBJAOJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKTQSDXT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHCKWQWQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVYKHJYA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFYPRYQX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRSWKBFA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOMCJLJZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QEIWFLUZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBIOHIDZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PPUOTDUN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GFQNTBSE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSALGTVF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GDTNWGPX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UETCNZWO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LOKZJFBQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRIYZZNG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EGKBMGGR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLJRZXSM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UJJQODDT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HHGHSYND", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IIXCBEBZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXRCTWZD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLKGMZUR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZRAWNBK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QEJMPAFU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNSPRRRY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRMIRCHT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVQQJZLL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUTSLSGY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZRZXIOGK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFMDGKLK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWKJXWIH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VISKTRLL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCJDYMGM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FYAZBIRE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCWAVJSD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIWOIRQB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMOMMWCP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVUUZREJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZIHYRPB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SMXWNYCS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ORAIUOIV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BFAHLTEU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NGRQCTZX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUXEKXUF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LETZVYRX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IEDTBBDT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKTNPKAR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TOEFMIYJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJWHEIKF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IJMMGQUA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBMAJTJJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WTROKFDX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVSLBEJR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LCWYNMUJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNMGSAMK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCYIJLHW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYJGVMCW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MOBTWDEL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQQLTEBL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VDMNANWN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HHKBXRYG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JRMTZTOG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNCQNOON", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGNSPOFZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PUZVLGXT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DYWNYZAD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQAUKUXA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDRGYQAL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TSYWBIBG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHPDHVRX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOFOBNRJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NZYGCWYN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYNONEBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOEBOCNQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMYJYDVM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHUOFQPZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZFBWBBNX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SVMYCAND", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JZGSAKOW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWMBAENT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HMXQXVFI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYMXLTNW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZAWFADB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJPTHHMI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLRNDEWM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HXEFNJJQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSPPCTRO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WASXQIWI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYCVBJVT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKANMOMB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZXCYQEJJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTZPEELK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFPWLBRQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWBIMRPY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLLTMNUY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RPDVPCIN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWUSALBF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMADWXBB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDIQKUKO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TNXUVNRC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXTDDGZQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPORDRTP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IALZSUWW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDODUCHA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CBBKGJTB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEJOXXEK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODVDBIGY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFQJCXDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFBVKGSS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RRLTFMOD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHSFFMII", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHTEIKGL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOBQIECC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWGFDLUU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EGYQUPNW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBGTFSAY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJCUMKWA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FCLUARAQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPGRJHET", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWTLUUIA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBPDLTUS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDTMTRFU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NCAKUMTO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XMCIIGNZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRDJIVQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BEZWAYML", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMJWFPLG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IEKSPVHZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FUQGMEXS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYZKURAL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRIXRWSC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTVYTETM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQHCWQQX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GPBVTMNK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDMGWQLT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BKWDAEZN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CAHUZXFI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JJNDCCVC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEDEIOFI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKSDOAIY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POCCKFPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUWOMCZY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FKQDDPTK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQENLMMS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXONLQRN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBMQHGWB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUVVWUKD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KLFEVDGU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DRYJMQXP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILFIJAJT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVFWQGOR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JOBZWLSQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RXBJEOHG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYLMHEEM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MQHQBYRC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKXVKJZM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AEDMZTWL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GLZGHCBI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FGKFZKPU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EJPKFBJC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTQIXDEC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOFNCRJM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNVVBOGA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JAMPXXDO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NCEXHRWM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIJJSUUE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKNJVUUR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CJBKPLDZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZBPQKIXN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVALUTCK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MMHLMOCC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSUREPNY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVJXAZOV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOYLDSSS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKEYAADY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYSYWCET", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLPEYWYZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNLEDMJC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKCJYDGE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWJHMFGX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWQULXIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRSVUFBG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SIAAHRKT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GMFZAAQC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWKOAUNA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOECLMAW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNTICTIE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QBWFJPEJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWTVPFDJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTJWRICM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CHZZNEDJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TTNGVKBX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQFVCMRI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJFGWWSN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUGXTYQC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKLYUCSV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXDOASKC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PNCZYHMU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMYJJGNA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EJVGRPAP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNRGBTLP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFTTVVZQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPCLALBK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HFIVDZTZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OPSIKKXB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLTNRMBD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQAVZZON", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWTVXDOR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXALNWHL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OPKUFXIC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVANXRAG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUMDPURS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QQRZYZZO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQZVBWZG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUWEAEJV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMHIHYUF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKVBYSOI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGJGQLWP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FUHMSSBZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MTDKYYXQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSLUIVTP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOAQFHOA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GZLXZFOH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNOJLSWH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LESVBDGV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKJKJAUH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZMJACIW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ADJUYXDE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJVXJYMX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCGMTSZA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HEHRYCGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNXQGMUF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RRVJNTIA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GEHLCPXC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UDNXDQJV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XEMTDVNZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIGMPSIY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FCPKLLSO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYUPURCE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFZTRLIV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVVFEUXQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLSMBSOU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOWYGMCD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXFJIASI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CYVTYOYS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTXXUEPC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IISOEWPQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WOHHIWGB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PVVZROVZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JURMFBWF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XUJGMIDY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSYHNHBM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MRMKXBMU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GJWAGZPH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKZPBLLI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AYANWCBK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSTOTRCC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQGHVCYR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YHFSXAXZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXLXVVAB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XVHRDUAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GRXFTUHW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSZNXADN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUMLOCZF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QELWCFID", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JEVXCXUW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUMBCMWI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WIEDPTBA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLSMFFSN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXRMOTYO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DGECTGFL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QLCZZMWJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ULDABLQO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HSCXHQPG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GSVFZAJR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WYHQAXXZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWKRNZJU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MEVMMWYA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EPFXBVGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOQKINCG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ENJLUWJW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLQYRSAB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ADODMXUL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWEWNSWF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GQPETYTB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSIKOGDW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKOQOMXB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQKTFULJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QQYIKMRA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CVRSAJPL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KKVMUAUE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVAUMHOL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZQNEHKS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QKQBFURE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YJAQDACH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WSWDRKLU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZKCXDPM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWHAUAZM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNMBJNTU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WDLTSFYO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGUYQLOD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYFVNMYF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETYKALXH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELZCYTND", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPVFSXBR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BPZYLGCE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOMCGXLW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JFOLASZF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPMWIZQU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARKTUVFH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJWAGTHC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SJNYWDUP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ADUEOFUU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGEYGLKV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACGIUKNR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XMWSGZFY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNJQYBIF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSKOZNUU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSHAGYSJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNKPRUJW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEAZYWOY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLNFNABK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SMGMHGCQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKERWMLA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLGZOOMG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOPFYYIV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWIXATSX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHWEMOIT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DBMTZSBW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUNBANQY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSKGDHOX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NEDNJUBW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HEFJZPFN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RHGVREVG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYTCGNDG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBAUBZCT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QECKDQLI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUESVQPM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXOYFVPR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THNBZLJG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJHKSRXO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OZCOFLJH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OBUWXWYL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYNQLYQI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYWPREFU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LVDXPUJX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OOUSMMBN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZBKZNJB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHIQCZFI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GXAAZHIC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZOYHTYTS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVDONLHY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUFCUXWD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRUZFPFX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGQVUJIL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APGIWYGF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRZMEUMV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SPSHNBMO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVYIKJTA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONNRFUEW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIABVWWW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFFYEMVC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHMCGFVR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZBQKYSVV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNBSLYOB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RSODDHAV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQUYMSGH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABKMHGIZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MROSTPHP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "INERWPPY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QNKLWDDZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AWUIIFMY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RUBELFCM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWJMSYQJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNFKQNAX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMEKXYVE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOCVTANY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UMCORNIV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQLFRFYG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZFIPNUGX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOAWRCET", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRIZTGYP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CGSDNTQN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QBAKQILF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHKPLUWW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPOUKBHP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXZVLVTD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVPIWEXL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHDOEGAS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRHQQDZH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCPHWEYD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNFRUAIU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FKIYAQGJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPIUZQYT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPGRSDRF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVMAESFS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FXJTYQWV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HABNPTPP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYEYZDGK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTNSJAJK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TQPJFVYY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CPMSRRNS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLXSUQHA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJWBSEYN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YECHPGYX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DFUYGMUW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXMFYKHY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CKWZNWNM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PPWHKMHQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSEWHIWA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXOBLVQY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHMOUNHF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GSVPVWII", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQXZYLDS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FLYQDIPO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOEGOCPD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBQXQQXC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOPJWHUQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPAYNAXV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QRGJCNMV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YUIDTEDD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZKXFELD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQSIVGQH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EFKTLLAF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEUSYOIW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHKXEXPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWMTDZZV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTTNGWBM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPLYBIOU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YSBTJRGV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZGEDHKX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKIENNLL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWTPMRIC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSEBFTFO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQACLGCI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMGFGNOZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BESFKDON", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQILCQEZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ECMEJWYG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVTMGHRS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FGCLFLMZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKSKGNNO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLLYDTFB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUDQSJGU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QREWHWFK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WGEJPIND", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBXKJNIN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBSXSXFM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRACPCGD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APIODECM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JJYKOARK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SMUKYAQA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYFXOPLW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FEABGCHW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTTLUZUA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KECDDXHV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGULWLYA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FTRZSNNS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHVKBBTK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDVFXAXE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCRHFKVJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FDQILJCF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJPLIQBS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UULJXTQZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UIOZLMXA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQGHZYCW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWTANTGJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBDLGTGG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYZNBNMO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOLFSJXX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOEZUBUC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOTVXUDN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLNMMQBX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSNGHTHI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EIKHBWOZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLJREFUN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPJXPVJI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMWYZESY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NAFLFHBZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IDXCZKGN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWOZSOOJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NYDFULQV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CTOCJEMF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKBBDVIO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPGQAOVP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETFFDAAV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANVNOPGD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUCFHMBH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHALUVEH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJMSQWTC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDIUINHE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLHTEVJL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUMDXEGO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DHYEIKRY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYXTTYTP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWMSTPUR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GGWDENWC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYIOGVHL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AZSXNFMC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFQRNCKE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTAVHVKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFEKYENG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLASIESP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUKHRCNE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGJDDXXA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JLISOCIQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOXVZRQK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KEWSJPRK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWDUNNJV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWERVBGJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIFEYXHT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVLLJZZT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFKWTESW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWBSISPU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AEYXCMLR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RSZZKAXS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMPNJSPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVLCJGRP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNAUDZIL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HRUDWXLD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKPGEIFE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACBZDTML", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CDPSJYXO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JOEUGQGM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UMTKEECK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGIEUHCN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SJCQTRPS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YLCHVMQK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGKWZGZQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLCORHPU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZCXYVMC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJHYYGTT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACXRQPNQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMJEMQAX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVCGDMLE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDPMIHFN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPWOTELN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODUTHWRQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUTEMRMB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QLDELXJX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTTSBVJM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEHEMMTJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUMJYBVO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XPAWAFKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGFJRMXL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IYMTBJFP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOYSAAYR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEBINFKA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TALOQVIT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGRPHBSC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WYNUEPBC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WANMMZYI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKIOWNCV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLWKHVIX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VXKRYGXA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKDRGOUX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGGLJURH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTWFGRSX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVPXZKDP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DSIIKNFQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVHHCPBH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XIOAMLVN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQQHCPFK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTCLKDFW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OHDYJTVY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUIOUCCY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FYZUAPTB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUUISNZA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZETFUZH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWYEWUVE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AVHVRLSW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLSXARBQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZCJTVRQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWVBFMHF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WFOPMAXH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NEUTKVLI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REDCZYJX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODVNWLEY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OKWUQVWF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CABBDHHG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSNWHXUA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUDEMJHH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJZVYDEH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYSUJDZY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKZWLDPV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRQFEOLP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YYGAAAZH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVNKQWTI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAICNRIQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GZCAHGFZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MRTDNBKR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBHKEOAJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HEVMCNPW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKMOEBAO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSMFCIHR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TZTDYCCS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJPRVXVE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNBITWKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPERDENS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APOBAQLU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMTAWQFX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONXQHMKL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPVAZRLS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYUKAYPY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKFOAZYI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JBCCMOVZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCAZOPQC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OIQZRYXP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQEFPRRT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCMTKDMH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHKPRFED", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZETIHOR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOOQDHXC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FPBAUXHV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWWWYXZE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRPAKAAW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TKBCDUJJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWAYMHFF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWLHKSNS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVZWFCIC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLYMNWAL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWBKWRNT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILONKXLU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XVZOUVMV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WTUFHVQB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOBONGXD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CEQNAWXR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YSFQQDIX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WENQCJPH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QUTQMNVH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SALGZBMP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFQXDIJU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQWUVKUI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CIEMUXSU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXZLFZPH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMJJNOAP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SAYDRHNS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDRTNXFG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REXIUCBR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYUWGQYQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQHRYSKC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CCRUBAQT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PBRHUEXE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRFBUABT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZGXAENPL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSWSMWDA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QVQKLGOA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HJNWCSOA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HAZUDCBZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMOWLZTX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXUMLYSW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGJLNDCD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFVELAGV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGUGDRUN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ABQKRQXK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBATSYQF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UASDSIGA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVMWFQQH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UMMSEZES", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHKXHSMO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IGOZZZCV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKBUPKSP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WTGMOSEX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELITEIVB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HYOSWCUS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUOFQMRZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZPIPOLW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JYXWHBYX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LXRNSUYV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTXXLGLW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GAHTJURC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGWAWKSX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKECEWSB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDRIZSNY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDROEOZY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWQEPZGF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DWAUWEKB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LEJLKMNF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GWLWPHRB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ENMGWGVB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TAAAPQIZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZODNNJJM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZYUKLBW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQDCYFNU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APODOQBB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBKAKNGK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJQSSRWK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VRTIXOTY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMOCEVGM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMFEKPIR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HFPAUBYC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVYCADVJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VIELNKCF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "USLVVIUS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FFGXTZBP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NMCOERKW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSZSPQDC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FKWQCANW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOLRPGTT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCPJJYGE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CZPBTGIH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LYFGNILY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RXRWWRUS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHIXFDFE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOLOASBG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVFJRTXM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHKXTTEM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHZGFTNK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYALKJQB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNKRTHXO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDVHHBMA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CDYUYZJM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PDPLDRAJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JTGNCGFR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHYCTRQD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FOBJMXVR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQLOIZLY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWWEKRBP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AERIOBZD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JXSQDOGM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPBZGEQR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMEFVKKA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOWPRDFA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNVXYHEQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WONPCTTL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZDSJJUII", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XRQCYGZX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "INXARBNX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HWMBYHDS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XTIFANYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVCTAWEO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOZCBWBW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQJPIEOD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLXFEDDS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXJPRIMO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KLZJBMBJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXDFWQHZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NIJDVRBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKDJSHWT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MZUGHFLH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKCSBKMJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDMJODIE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACIRHZGJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAJPUAAH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MOWPGTSH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUGHJECQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGQRSMIC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEALQASZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLSMYOXF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZFXNJEB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LEXDSHDU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VLCEQDGZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OFECHZOA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XSVMZRNR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EAQVXSDI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PDAHZQVL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WGOYKMSD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OWLLXSUU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FDXWJXOZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WGUVNCTJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DABWPHWL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFCSOVGX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOZHZCKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVCQYEVG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWVNRWCG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRGMZKOQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URWCIIXL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EJMNFVNJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSLDKFPX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KJAKDHVY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WMCCKOWD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBMYAPJQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BECPISDW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZKHMSZA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOWRJFYS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RSULTMMT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGYACMRH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHJKKUBV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OMFYVGSO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGXBOEUJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EVOUSIGH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WSTRMTFS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MAWXBSVL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPVRTOFX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "INIBNBCL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYPAFFDL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FPNVZHIB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BGEFKUSG", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBYKSCJF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWDCWGTG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHAJDTRS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDGDSRUL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STNFOGHT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMEESCOT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHNLSNTO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TJMSOIOQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OVKADJER", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMZEXGVR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JNRAXHNK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCSAMEKX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LAFYNCZC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYGTJQAP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTJKPHKA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSSSUIXQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHTZXPIS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWIOPLBD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "THCDDAVC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NFDQQDWY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XBXQENQM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYGMNDXB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMTIJZXC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NBBNPAGF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HUAZZNFO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWAHJJMN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IOMJUVJW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUWLOSUQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VIGAEPEU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJBOJNRT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKPFRKLC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WBKPPWNW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQCOLUOP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HJMXLVDU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOBEMDGQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OPRMHKZX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VALWTGXN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTVOFFLQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYWQBKXK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFHXSJUA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACEDNZQQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBQBDKLN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JXMZPNMA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DRNLRZHI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDHJJGGZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BTPSWCDW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQFNQQHW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWLMBBQR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ODRPDETL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNGODKZT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDBTVMHR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UHKNNLXX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZAFHBDWL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NHJEEWER", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGYZPLVQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ERHEXXWF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HBMXCYWN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EGBDWCPO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QUFEYWNJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSUOJGUP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UDMGVBSI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNCKFCLD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGHTRNIC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQTYYLAS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBEXNFPK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FLACZIWA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNZVMLJH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BCXZVMQC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLIAROFU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QYVAUMIH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZXGKJYVR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSDSKBMD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKTKLYOS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLHOFXFM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJKTOOTS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDOWWPXJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NWYZTHJK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CJSPMQXB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IKCPIWEZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTREJTRN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CCKXGTUZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFHEADUX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCAARYLX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXHMKVQF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRSNHMNN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKPWQBLS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FTTMSQPQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFYZCEYS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXSIPXHN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVBUXHFK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUSLHJIY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQVQGGML", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQDCIOLH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQLWQFCG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ATICENGF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXPPITZL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSKWBYPN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQXAPBBR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LOAINNNR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOWRFUZQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GARRNDWR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPNBRHDR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHIDTZQU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZNYTWQT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PIRAMHLD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJZYGYYB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXWDAGRY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPSFIWLI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PXNKEHKS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZZEKPER", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "COPYRGDH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOMTJIQE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFCZYZIV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQNYJGGB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIEXEEZR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUZJFDPY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHZAOFGT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSIABYQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NUBUOCDI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFBVGSMC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZGCFLYRR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQKGSWAY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLRMAMEZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MJADWXJM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PPLXLHKM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UOBVBCEA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWMZJHVT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FAHFPTNO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AAMETEML", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XAYEDSBB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVNRKYUN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NXLZHMAV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SVKEJBES", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ETAFEXAV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDNLQMSX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZQVQVRV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CWKJKHZV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NHAUCRZC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RVYIAVJG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKKJIUQR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYAEPCOQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFEABVSJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZHSVRZO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ATMDSTQI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQMMXYJC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GBACZOZR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHQVYGDE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QQSCXWPR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWJBRDXT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWHOAFMV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPRYDMLZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDNMAPRA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWFCHDQB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKGARFSD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CZWKKPZW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONTGDSFD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLJALMKJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LYLTBIGY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IJKKCNHC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKCEJHVL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGECXMFZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRDYDWXY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWDLXREM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XZKBJPYE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNQKLDYJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAHTFYAI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UPZNQCFU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFVZFNLN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCWUECZX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZRZZFEA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRLNKTRP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYAREBVI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DKLRRTHL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWPLNDOX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHYNVMSO", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ITZOSXNF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZIGRCQU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZTCFHEBY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYYRBTED", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGAKQEHG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAQGFSHD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYVBHLOU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKYWZNWO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHBFMHGG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GIJAXNRK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OIIWRTTR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWVHRJBK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LLCYJZPF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AXARPFFL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LNSAIBER", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UBCZHQOM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QCJPPZKS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GNBSGXNE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMMLVSNM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YMWWNHFN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FOYYJRGC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOPCHCTK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IWCYGHXD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XADMZMEV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYFZYYVB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UUYBMMVU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARYWCICH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRXLGINZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZVJQYWCL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EGNQDOIH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SMUYFRBI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWPDWZBJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQWDDUZX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KIBAEBHL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ONJJKWWP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPMWGNVS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJLBQEGN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FNGRGUKQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DMIBBQWH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPEAVIXF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UUKIOLAY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTFDJMKN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQCVTKIU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZHWFFOV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMCBHONC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUZZOQSG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DTRDDQKU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QREVSJQW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MLRIZCBJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZYHUHRA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KVMCMVXI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WYATHCCJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZRXPSFIQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AKIAFHYH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPUPSEFM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OFZVKZKG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LBQRIXHH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDLTLOHE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UBDJMUVX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKFECKXC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKQAOSNF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPUALLFV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVYQLPLA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUKUUJBB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBTUNTYO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KBTEPAEL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NAQQNCHN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DRUOEODJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NKRFHTBP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMETIKWH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKGRZFRQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIIQJQZC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHDWALLS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XIZDRSQS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IMAICGDC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKGDXFVK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OFXTEXYK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LBIYULIL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQJZCIFF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VLEHOUOW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZHAEZXQS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOFGDDCT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SINHLTAZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZEJUAVBQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWLIBEFP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XRATJIUP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTNLSTNK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBDAVEUU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TYGCWGQR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KYPGIQEW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFQHKUPU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YVKTHUQT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PDGORZEE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PRFVRHDX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LFVYXTJN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMGJBTPD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WDTYDGPA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DZUKBGGK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UTCGXZIR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RRPGECRR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VATOJKAY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TSLLXFTU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NSIYFEWM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EQRWYEMM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JIYXLPCM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQXPQHCL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JODRBXMN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RPNZNCNY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZYEPOBJH", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QOUYOZNV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CLBOFDFX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOKBLDOU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRMUQTOJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYUQANNM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FJRJFAOC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MEDGMZSV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFVVCSHW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDMGVQTE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRFGNIXU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLYBMCXW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFUZKDRD", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQZTZZFB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UDYZHZMX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSXQXHTD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CXJZNEJW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZNFGKLYI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBHQTSMA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DORPNPLV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPQSBDRY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DCYZLKBU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HYNOOPER", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUDRTRCV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCDCGNED", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LNORSEZW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGWQDLTL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQEJXZQO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSBNTXXO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NKWCFLPF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MCZZVAEA", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CGGGQUGU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JTNSAJVD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZPHYGHWN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZDHCQMH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UESMTBWA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNQCBZNF", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CCRVBEYX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XNQDYXAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FWGXSUIW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBFWDUOX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSAZYHYA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UKDUSKXD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GVYTHPJC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOCIUSPB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JBCITRVS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUNJRKVN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LAXIUXUG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DVILRTKV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRTIVQLY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IDAUTSWC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGQHACIG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVSBCZSI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFMDCTPU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OHZXXJLQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XIPRKTMS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKSAONRD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWSEMWMX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EIVYVUWL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GYHNNWBL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGVZVTWQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XEARZNCL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BFMYYOKY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UAATWGIG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IFKGCGNP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFBRTUSZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JUBTRFSR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUJMFYQT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFIIVPLG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDLJCRNM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LPLQATWN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OOSWGFMW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EUGJMKTT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOYEZYUC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IRDPVYLN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TKEQKZFX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMBDPHMT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QQCFDIXI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZJULDIDB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AKWTLJWY", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQAHFVDM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUQLDBNT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRHCWMTY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RRZXUHVP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOWCQFUC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TMQAMDHG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPDRBJSW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OOVPKASK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WIFDJFMM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZEMHAZGK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIOUHJGZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLBTTZEN", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWYZMWYM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QJUKTHQD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHFXCYYB", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQRAZMOR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXXUUBDC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XYTSDBYI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RZMTPWDY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EAXKWLBU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWUGXBOT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESYEJCQL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OAYBWZRI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LXPWDACT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GGYTDROC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKBYUVAH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKLVMIAO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLIRHUYJ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVORZEOE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXLHTXKI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCETHBLX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ALKEWVKV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSUDQETC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXMLWPRC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XIZPZMBR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NONYPKIH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQFBSDOZ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCBQCJUQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GEAACUMX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NHMRIPXR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPJYSWKV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KIXZJRHX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KGADLNTI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBDETKRW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PSDTYEZR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMGOGUMW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LERLLIPD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TQDPEGAY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGQHRNNH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OCPMFVTI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDVDMMUX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VDUROGCG", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZJSMAHG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AEJYMCBL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AUOSPAUX", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSFGYHFE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VYFSUZSF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMVIHHQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMDTCFFJ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LZTNVVBN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXHYDKPM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RMFIGCYV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TPOUTLWU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTGYZFCD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MAKEGZXE", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVTFRBXU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRDLULBN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URWQQNVH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QWSPHFMB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BHGANUHU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFQLPGKN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTGXTJKZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWWATZBX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SFNVDAIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JSOAATAT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKQRXUGS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANCZMWFZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZEYWTPIU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWCWYTVK", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CGNLMEOC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "URWHVDAJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GENDATYV", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBFFEQFE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLFWZMPA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KASTJITL", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSAEXFBT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VOBSTYRW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LTMTIYVZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WQESVKKN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOJIRABW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVNNZJBP", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CCEIJWBF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LILOBLJR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EADBRSNG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XKMCWZYO", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EKAZISBH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WUZRDHFN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AKDAJZXD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VYWSRNAK", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZEZPHOF", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PHJWXMRU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MZKTXPPI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCJRPQSQ", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBXEPOZU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OYTKLEJW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RWRZCAWL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBFPQKHR", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVDBMVUC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJJOCNPV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HNIGRUPC", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NPIZVOYM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DWSNGTDA", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTNNUJLC", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FICUDEJP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXELHYDV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJPTGJDI", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TKVJEIOZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FWJMPQAT", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "sass", votes_sum: -1, votes_count: 1},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NNITXQQV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EBKUXYUT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VIFTJFSO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWFXLGMX", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VBXYAYYW", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 2, votes_count: 2},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIUBPUZS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 2, votes_count: 2},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VUVNODPM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RIODEEUL", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BVCLRWYR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TGSZOFCT", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYJFRERT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JHDYWCGP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWQLCAWM", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asdasd", body: "asdasdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYSECIXQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "adasdasd", body: "zzzz", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "assdasdasdasd", body: "aasdasdasd", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asd", body: "asdasdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "asdasdasd", body: "sdasdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "123123", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asdasd", body: "asdfasf", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "aaa", body: "aaa", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WIGIQNDU", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "addasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "adasd", body: "assdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "asd", body: "asd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: nil, title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "asdasd", body: "asdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "sdfsdf", body: "sdfsdf", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZARMKOMB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "dasda", body: "assdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "dfgdfg", body: "dfgdfg", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "cada", body: "asdasdd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "12c2359a-d037-4d8f-b1b4-6610e867f7fc", title: "sfsdf", body: "sddfsdf", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JVBDFYQL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSTOWMYG", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "dasda", body: "assdasd", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "56f9d377-422d-44b2-98a8-2ea1cb0e831b", title: "asdassd", body: "assdasd", language: "ruby", votes_sum: 1, votes_count: 1},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KXVLAFTB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHPYWDEW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJXWECMD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKEJQRZP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHOHHUMN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RLNHBHGN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFXNCDNT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJSUOECF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQFTVYUX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AOLVTXEC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MHRZNFYH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QKFTJQID", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LEYOUFWI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCYCYZCA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTMZNLWE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RBNGIMAA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQBWSHVZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XAQJSNBS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SEHIVFBH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GQBZIVTA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AEOKOXGS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZZEUDUDZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PUTPNSLA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPXVZXPH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMHPCDRK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYKSIJHE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PZASGWXF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QTUEFGMF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RANITRUU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WGCEAZOT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZIADFIAE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SDNSRMQZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFKEJDPS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQLEOKRE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SRPPLILE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XRIYAZWR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GOOTUIZY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WPLJPVBR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLVFRVRU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZTXOTHD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MJZBFREN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQQEHFKZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTYWIWCQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IHPXDXVK", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXAIEDNI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HXXOJWBE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HTYYORUY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HKBBXBZF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ASSVSLNU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CEWCYLKF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DIDRBTSA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OKMIWEGU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CTENHIIB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OLKIDCPA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RUOPEBGL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGWONQFB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VNZVLMRM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XGQVRNLQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVAHXEIC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWSKINER", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OXBLVTSH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "APJGPSLH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KOTOJCME", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TTWDAENF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJFNXZXF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YKVQNLTO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LNNPBJRF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FIEHPUSE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AZJFXQKF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJDVJXMJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LDNDPCXT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQECUITW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZFIHMVZS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNHSLBBS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LGUOPOQM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BYSSKYAE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GKPIZDDN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BSBUPLJH", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUVAJYLT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DOHBVZOT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRQZTJYT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZXOEUHPC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SHYVXYSX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBTHCMAR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KBJWMBYV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HZBEAGHA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWKIFJEM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EATNESVA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MWIEEJOS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GTIOISZV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRASWSBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWIMBRGE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BBBPZYNJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POOSBPMF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OTXFGDKX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQIUYABC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XHCDVMAU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XVTYXFYY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GJPRLDRS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XANZUEMT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAGLRRJX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MESWYDSA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAJBPQST", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZAZMVDWN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VWWZFRKU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDFYXSWR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LTCNFOZN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TIAADFFA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BLXZGQBL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MVUHRSNG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MPXHJZMU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLXKGWIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KWQTRCEW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YDYYZZQI", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FQIGZQDY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PTSGRYTQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRVYPNWN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JFMRUIZT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CTBYYFBY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFLFDLDE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHXLZSML", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ENCVNRFI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ANNHPFQB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UDFUJBPO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JHPQCACP", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AAXWDXYH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YNXGOOWH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TPEBPVAQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCYEWESH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TDSARKNB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BWSTYGFH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HCWKTXQP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "POJEJUQB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NTMTWHRU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQRFLOCI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DDQNNWIV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLQPMYHD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UMKFZTGG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOYDNOJV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBXNYSXO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FTKMEPWS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLBOOYXF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QUWDMGDC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BZYXBQGD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKSBNYPZ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKAVDZGL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FYBQITKL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FZEQTUMX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NQLSXOSS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EEFKUGHN", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PJTCUVQC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWCYPBVA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRTBKGPV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QAQXXMOJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPMZOJMD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BKFLJRSJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YAKOOCMW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FVBXLYDJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SDCZNRDB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EFDTWFLD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILEGYLRX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YXDCRZZS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GUTSXMRB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRMWTCNY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CJDYRGLM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XQTYNHVH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTNLVIVJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CFBTLRAZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVWTGBWS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VTZOWLCR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IBRYDLRL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRAZYUWF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OZQTVBRB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UJKRNMNZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUUURAZH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZSRCXEW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KZOYSFHF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JYHHZUCD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTBYHPXD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NRYWKFRC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XWGSSYQU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DPGGZAED", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKXVKBML", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWHBYRTM", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WKYRJAZH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PKVCGRMG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRXFPGUE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQIWWFVJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XLXDJNON", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FBCHQSPI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BDYFESTA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LGYZZVQP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CSYYJALE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LRIBQMUV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CETEOWQL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YWHVNABV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMKESYUB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LHYSVRPL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JKVAHCFZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVHCFVPN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFVEWYTD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QDPVZVSI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WWFKVWYF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LJMPZJQN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UGZGOLBG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZQOYKDKF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MXSCJNDQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUUCWKFS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XJAURDME", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDBLLBGF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FAIFBVTD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWAIDFUT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHQGBAJK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DJJVSWMF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GZSYQWEI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VTMCBEKH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SHFEXKIE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BQAKYCIU", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILPEIMFY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFJJYZGD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSPBTBPO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EHALCWIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DQGJFZPB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOUVKVTC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TWQIXCRL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SHQIBTZM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZKPRHAMJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WCQTWJKK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXBNNTKN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GHRVOFXJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZSVJZVRK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PNWOWPRN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXTXGFRL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QDPGWDLX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OUNJANUA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VGTKFNLJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLQZVBRP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLRZQHKY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PQYJMBPC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BISUSAYK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PWDUACEN", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPNZXWDI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCFUJGDT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AIYBHNZH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWGOTXZQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EDGOOYDD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VYFSWBQS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LUVAYKEA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMUEQNXN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AWIAPEAE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLMLSAZD", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RHIRWKVO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJZIGBPI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ORQNTCMU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LGUMYETH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SQDOSHFM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EYBUSGDE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRYPKUYR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NLXWMSSG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XDJSOSEM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SBQOHUQD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SLMJZMHT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ELXIGIPP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MKBKGQCA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CETZBVHG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YBKNEZKI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOKBDHZZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YQIJWZZG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JQKFUHKZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KAXFQNUS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WSZHCNYZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DEUPEANF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GSGITAMR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWVNBWYD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPRTANVQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OTUOSDMJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMXOKXGW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MBHSVTFY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CZIFVDNN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNYUJSUK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGJZEMRS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WESHUVIE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GDATODDK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CBWIHSAV", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HOGNYJQW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HDSZKGEA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDSIRCOG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMRSYKTG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FAKYPRRT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BRFBWXZW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDKJDTXW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MLAAXVAW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WLIMLVTF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYRYBWJR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CYOWZWYB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNTZNTBS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARFBTTVV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VYUVOQAR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RCHDICGS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXGHJDEN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EEJFIDGW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SNQATPZN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVFRSHKT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KNHQNDSD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ICEDKIOE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQVEPUIH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RJCBCUIU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CUTFNJLV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MTNNMHUD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSAGZMNW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YHPECBHH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JDPULIAA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FVBWPUGX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TFWMCPNJ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEIRFIIP", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKPFECCW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RKCYFOPS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IUVONRXN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KTWDLIWV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEGPZHMG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNULYHHS", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PNNBLXFO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TBKZQLNC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NDMZLDPJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PEHQIVFC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QPZNMMYB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SUISKQNL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YFGIFEPD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KKRTMPAD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WHTJGGAA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZWGGPTNT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HGQQOZTJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDVPCXGV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QMUBIFGH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KMTSOVQQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WEZGXSXW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EBHKMMYD", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VPKJFBGQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EOOHZADF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RYZZGMST", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ISBSDNBO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BJDNPVXA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UYKNPLMU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KAIZMQBZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KKGDNRVS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BBDWACBQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MOPWOAIL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKUMPDYD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FHACWSWI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KSNPQABC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XOLINCHR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NZBAFMTI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YCNGQWFB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UXSQHVUM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HLJXNYMJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JASVQXLF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SXHPHRMA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BIVXPMJV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UZRTGYIQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CBRGCXVW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RQMLHICH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQIOLIHQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMCRTGPS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VZBJZRSQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FSRUGNKF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QHAIXUOO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VQBXYSSM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SAQMRSIR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SGNXUDUY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EMNDMJTL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YZKFJSBR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OQYXLDMQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MJOGUNZD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JIODPGWS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TXBFFPFD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WZNUSLUO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SFQWZMOF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WVAZKLRD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TVZMMSSC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "STMFQZFE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRFJKKMC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MYMJGOWE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ESZPWIZQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YHSHPJND", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYBMRHTY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XUYHZKFQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CMCCIZTG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LDJJJPJS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFHVDARX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSYUGFFO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNNDPNHQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VJVZYDWH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEBZSNDA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GCFGMIWQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUHUAVMA", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VICPQWSS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IDXCJRHP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EWXGKYXH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWGHVKAN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XAJCSSBT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XXUJXYLO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKFYGVBM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZYCAVDZC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XFHFZOEG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PUZSXSUC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MSNPEWXQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BUCNXELQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VMOIWNCY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PLBZUTKD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XILDNPID", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NPJNAIVS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SSWKSBES", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "HQEMDSBN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAGBUYQT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WTZNVFIM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QGKSWLGY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKOWPSNY", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SZIYOMEZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JLDNODSS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FXWLKJIP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMSNCMHZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GCFZXSSS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMCIULQQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZLHVJAAP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IQRRNJVN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SAYKDWZO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KCUGHTYH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KPDYAWDL", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UFRNXCNE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ATTRKZWG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TCULMPOU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IIWPLKEG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BXJSQEBK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WXGPDQZG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VKODHAID", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OSGTKLZZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YGUAOBEU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RUOINVFX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ILARDCJY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UVRDNICM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SDNNEKBE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LQYSDTFX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YIJLQUSC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ERHKZOVY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AMTYUEDH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UQXHNMHP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "REFSTDUS", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JPJSJIMF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RDMMNMCN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CBALTHVZ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARRKDQOV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XBIHVITW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FRSGNVKC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JEFYSHMQ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WRPCHHCI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "INMXEBBN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MFHOYJDY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NMHRREYY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DNIGCBKE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GXKEGWPU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QODPWTPT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BOISWPGH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CRBAPPJN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PYUPFFOZ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOVLTYPA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SPWIOBAX", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IEKBDLJD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NJHPRBHA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PMOZMPIR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWXMWBBF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YEILXUQH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DLQVCUUR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VVVEOWZF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WJINJWWR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMKIIBTD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LKOZGKZV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RFUXSEFG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UWASAFDO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EBSIOGJB", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RGLTZKBO", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZUGFNFCG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YOXBLBOM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ITKYMTXR", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QXCIYAMH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LMJONKEP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CQFCXNIP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KFJQPRNP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MUDCILFH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QRULNEXL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WAWYFVDP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RNSGATYL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PFTXYRDT", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ACSSQQBD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DUPZBCAR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVRGSQWO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AHUUUJOQ", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CPCAFTBA", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PPSPGITM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QFWDJXWI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DXOPHBBI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VSCUIFGF", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "KDBGWUTS", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YAJNXIZJ", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IVMMXFOE", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PGZHRZJL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IJZPQSXF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NVJXWHPE", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "UNHNBRMD", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "EZYXNEYH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VHUCWFDX", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "PCSVSSRV", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IYLVKUKH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SOMGVQJN", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VEYEXYOG", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGQIGRTC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MGHRPAVC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IYIRPDDI", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ZMMUUGAR", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LTRWHSUC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GBQVCUDP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ITVIJTHI", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BATOTELB", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SKXEESUH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "coffeescript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FNEHCGNM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "IRZNMSQY", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JTOOGIPC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FFJMDLHM", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "NPIUALGE", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AFMUUMXY", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MIFGWFBL", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "BMIHWZGP", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "OCSJMAFF", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LENKOSGB", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "XWDMPUUQ", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TRBHFUPK", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "MDVWSVZU", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "ARUPMXWH", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "TPKNOYDT", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "DSJSRLEW", body: "class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.human_enum_name(enum_name, enum_value)\n    I18n.t(\"activerecord.attributes.\#{model_name.i18n_key}.\#{enum_name.to_s.pluralize}.\#{enum_value}\")\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "QZMCXSWV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "LWZXLXVU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AGNGWHFW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "GZQXJYFS", body: "class Snippet < ApplicationRecord\n  include TempAssociatable\n  belongs_to :author, class_name: 'User', optional: true\n\n  validates :title, :body, presence: true\n\n  enum language: [:vim, :ruby, :yaml, :css, :scss, :sass, :js, :coffee]\n\n  scope :order_weekly, -> { order(\"date_trunc('day', created_at) DESC, title ASC\") }\nend\n", language: "html", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "AJLVTHAC", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "sass", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "CNJNQLXW", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "ruby", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "RTORCIYH", body: "class Identity < ApplicationRecord\n  belongs_to :user\n\n  after_create :push!\n\n  def push!\n    update_columns(last_sign_in_at: Time.current)\n  end\n\n  def self.from_omniauth(auth)\n    identity = Identity.where(provider: auth.provider, uid: auth.uid).take\n    if identity\n      identity.push!\n      identity.user\n    else\n      registered_user = User.where(email: auth.info.email).take\n      if registered_user\n        registered_user.create_identity_for(auth)\n        registered_user\n      else\n        user = User.create do |user|\n          user.email = auth.info.email\n          user.password = Devise.friendly_token[0, 20]\n          user.confirmed_at = Time.current\n        end\n        user.create_identity_for(auth)\n        user\n      end\n    end\n  end\nend\n", language: "javascript", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "WNZMAFCW", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "YIMVEVVR", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "css", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SJEEGYRV", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "FMBDRMGM", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "SYDYDMTU", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "yaml", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JMCJBJLO", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "JYPXMCVC", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0},
  {author_id: "9c900dab-76b3-4b87-8bf1-7352109225c2", title: "VFGAJBST", body: "class User < ApplicationRecord\n  default_scope { order(:created_at) }\n\n  has_many :identities, dependent: :destroy\n  has_many :snippets, foreign_key: :author_id\n\n  # Include default devise modules. Others available are:\n  # :lockable, :timeoutable\n  devise :database_authenticatable, :registerable, :omniauthable, :recoverable, :rememberable, :trackable, :validatable, :confirmable, omniauth_providers: [:bitbucket, :github]\n\n  def avatar\n    recent_identity&.avatar || gravatar\n  end\n\n  def create_identity_for(auth)\n    identities.create do |identity|\n      identity.provider = auth.provider\n      identity.uid = auth.uid\n      case auth.provider\n      when 'github'\n        identity.avatar = auth.info.image + '&s=32' if auth.info.image\n      when 'bitbucket'\n        identity.avatar = auth.info.avatar if auth.info.avatar\n      end\n    end\n  end\n\n  private\n\n  def recent_identity\n    @recent_identity ||= identities.order(last_sign_in_at: :desc).first\n  end\n\n  def gravatar\n    gravatar_id = Digest::MD5.hexdigest(email.downcase)\n    \"https://gravatar.com/avatar/\#{gravatar_id}.png?s=32&d=retro\"\n  end\nend\n", language: "scss", votes_sum: 0, votes_count: 0}
])
